{"version":3,"sources":["config/index.js","service/api.js","components/DataRecover/index.js","components/MoviesRow/index.js","components/FeatureMovies/index.js","components/Header/index.js","pages/index.js","index.js"],"names":["api","axios","create","baseURL","tmbd","basicRequest","endPoint","a","get","data","AllMovies","slug","title","items","getMoviesInfos","idMovie","type","infos","MoviesRow","item","className","results","map","it","key","src","tmdb","poster_path","alt","name","FeatureMovies","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","vote_average","last_air_date","number_of_seasons","overview","genres","join","Header","black","href","border","Index","useState","movieList","setMovieList","feactureData","setFeactureData","bgBlack","setbgBlack","useEffect","getMovies","list","FiltreMovieFeacture","filter","randomMovie","Math","floor","random","length","idMovieRandom","id","movieInfo","loadData","scroLListener","window","scrollY","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab7c7846.chunk.js","sourcesContent":["export default {\r\n    API_KEYS: '64de2d1cee25a49e1ee629270f4fbcb5',\r\n    API_BASIC: 'https://api.themoviedb.org/3',\r\n    API_URL_IMAGE: 'https://image.tmdb.org/t/p/w300',\r\n    API_URL_IMAGE_BACKGROUND: 'https://image.tmdb.org/t/p/original'\r\n}\r\n","import axios from 'axios';\r\nimport tmbd from '../config'\r\n\r\nconst api = axios.create({ baseURL: tmbd.API_BASIC });\r\n\r\nexport default api;","import api from '../../service/api'\r\nimport tmbd from '../../config'\r\n\r\nasync function basicRequest(endPoint) {\r\n\r\n    const data = await api.get(endPoint);\r\n    return data;\r\n}\r\n\r\nexport default {\r\n\r\n    AllMovies: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais de netflix',\r\n                items: await basicRequest(`/discover/tv?api_key=${tmbd.API_KEYS}&with_networks=213&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendado para você',\r\n                items: await basicRequest(`/trending/all/week?api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta Originais de netflix',\r\n                items: await basicRequest(`/movie/top_rated?api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Acção',\r\n                items: await basicRequest(`/discover/movie?with_genres=28&api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comedia',\r\n                items: await basicRequest(`/discover/movie?with_genres=35&api_key=${tmbd.API_KEYS}&language=pt-BR`)\r\n            },\r\n            {\r\n                slug: 'Drame',\r\n                title: 'Drama',\r\n                items: await basicRequest(`/discover/movie?with_genres=18&api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicRequest(`/discover/movie?with_genres=27&api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicRequest(`/discover/movie?with_genres=10749&api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentário',\r\n                items: await basicRequest(`/discover/movie?with_genres=99&api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n            {\r\n                slug: 'animation',\r\n                title: 'Animação',\r\n                items: await basicRequest(`/discover/movie?with_genres=16&api_key=${tmbd.API_KEYS}&language=pt-BR`),\r\n            },\r\n\r\n        ]\r\n    },\r\n    getMoviesInfos: async function GetInfoMovie(idMovie, type) {\r\n        let infos = null;\r\n        if (idMovie) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    infos = await basicRequest(`/movie/${idMovie}?api_key=${tmbd.API_KEYS}&language=pt-BR`)\r\n                    break;\r\n                case 'tv':\r\n                    infos = await basicRequest(`/tv/${idMovie}?&api_key=${tmbd.API_KEYS}&language=pt-BR`)\r\n                    break;\r\n                default: infos = null\r\n            }\r\n\r\n            return infos;\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport tmdb from '../../config'\r\nimport './styles.css';\r\n\r\nfunction MoviesRow({ item }) {\r\n    return (\r\n        <div className='movieRow'>\r\n            <h1 >{item.title}</h1>\r\n            <div className='movieRowItems'>\r\n                {item.items.data.results.map((it, key) => (\r\n                    <div key={key} className='movieRowItemsEach'>\r\n                        <img src={`${tmdb.API_URL_IMAGE}${it.poster_path} `} alt={it.title || it.name} />\r\n                    </div>\r\n                ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviesRow;","import React from 'react';\r\nimport tmdb from '../../config'\r\nimport './styles.css'\r\n\r\nexport default function FeatureMovies({ item }) {\r\n    return (<div>\r\n        <section className='featured' style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(${tmdb.API_URL_IMAGE_BACKGROUND}${item.backdrop_path})`\r\n        }}>\r\n\r\n            <div className='featured--vertical'>\r\n                <div className='featured--horizontal'>\r\n                    <div className='featured--name'>{item.name}</div>\r\n                    <div className='featured--infos'>\r\n                        <div className='featured--points'>{item.vote_average} Pontos</div>\r\n                        <div className='featured--year'>{item.last_air_date}</div>\r\n                        <div className='featured--seasons'>{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                    </div>\r\n                    <div className='featured--sinopse'>{item.overview}</div>\r\n                    <div className='featured--buttons'>\r\n                        <button className='featured--watch--button' type='button' >► Assistir</button>\r\n                        <button className='featured--List--button' type='button' > + Minha Lista</button>\r\n                    </div>\r\n                    <div className='featured--genres'>\r\n                        Gêneros: {item.genres.map(item => item.name).join(', ')}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </section >\r\n    </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nfunction Header({ black }) {\r\n  return <header className={black ? 'header-bg' : ''} >\r\n    <div className='header--logo'>\r\n      <a href=\"https://fontmeme.com/netflix-font/\"><img src=\"https://fontmeme.com/permalink/200828/d7fa46218581e004139f5ad9298e915d.png\" alt=\"netflix-font\" border=\"0\" /> </a>\r\n\r\n    </div>\r\n\r\n    <div className='header--user' >\r\n      <a href='# '>\r\n        <img src=\"https://lh3.googleusercontent.com/hOyPnc131KoSUUFvKIT1-UJB95D_cgVa6CXN9lMInVcOigPCjTtGfJBCXZUM5vgVmD068w=s85\" alt=\"netflix-font\" />\r\n      </a>\r\n    </div>\r\n\r\n  </ header>;\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useState } from 'react';\nimport getMovies from '../components/DataRecover';\nimport MoviesRow from '../components/MoviesRow'\nimport FeatureMovie from '../components/FeatureMovies';\nimport Header from '../components/Header'\nimport './style.css';\n\n\nexport default function Index() {\n  const [movieList, setMovieList] = useState([]);\n  const [feactureData, setFeactureData] = useState(null);\n  const [bgBlack, setbgBlack] = useState(false);\n\n\n  useEffect(() => {\n    async function loadData() {\n      const list = await getMovies.AllMovies();\n      setMovieList(list);\n      const FiltreMovieFeacture = list.filter((item) => item.slug === 'originals');\n      const randomMovie = Math.floor(Math.random() * (FiltreMovieFeacture.map(item => item.items.data.results.length - 1)));\n      const idMovieRandom = FiltreMovieFeacture[0].items.data.results[randomMovie].id\n      const movieInfo = await getMovies.getMoviesInfos(idMovieRandom, 'tv');\n      setFeactureData(movieInfo.data)\n\n    };\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    const scroLListener = () => {\n      (window.scrollY > 10) ? setbgBlack(true) : setbgBlack(false);\n    }\n    window.addEventListener('scroll', scroLListener)\n    return () => {\n      window.removeEventListener('scroll', scroLListener)\n\n    }\n  }\n\n    , [])\n  return (\n    <div className='app'>\n      <Header black={bgBlack} />\n\n\n      {feactureData && <FeatureMovie item={feactureData} />}\n      <section className='listMovie'>\n        {movieList.map((item, key) => (<MoviesRow item={item} key={key} />))}\n      </section>\n    </div >\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}